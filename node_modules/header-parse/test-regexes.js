var util = require('util');


var regexes = [
    /[!"#$%&'()*+,\-.\/0123456789;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\[\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~]/g,
    /[!"#$%&'()*+,\-.\/0-9;<=>?@A-Z\[\\\]^_`a-z{|}~]/g,
    /[!-9;-~]/g,
];


var controlChars = [];
for(var i = 0; i < 32; i++)
{
    controlChars.push(String.fromCharCode(i));
} // end for
controlChars = controlChars.join('');

var testPos = '!"#$%&\'()*+,-./0123456789' + ';<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~';
var testNeg = controlChars + ' ' + ':';


regexes.forEach(function(re)
{
    try
    {
        var matchCount = 0;
        var match = re.exec(testPos);
        while(match)
        {
            matchCount++;
            if(re.lastIndex != matchCount)
            {
                throw new Error(util.format("%s didn't match %s!", dump(re), dump(testPos[matchCount])));
            } // end if

            match = re.exec(testPos);
        } // end while

        match = re.exec(testNeg);
        if(match)
        {
            throw new Error(util.format("%s matched %s!", dump(re), dump(match[0])));
        } // end if

        console.log('\033[1;32mPASS:\033[m %s', dump(re));
    }
    catch(exc)
    {
        console.error('\033[1;31mFAIL:\033[m %s', exc.toString());
    } // end try
});


function dump(val)
{
    return util.inspect(val, {colors: true});
} // end dump
